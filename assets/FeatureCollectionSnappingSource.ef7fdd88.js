import{y as n,r as c,e as r,d as i,n as l}from"./index.a0c3159d.js";import{o as s}from"./queryEngineUtils.77901c42.js";import"./DimensioningAnalysisView3D.0d19a91f.js";import"./LineVisualElement.b68e53b8.js";import"./analysisViewUtils.c0225204.js";import"./PointVisualElement.9db464f6.js";import"./RightAngleQuadVisualElement.0132a60f.js";import"./Segment.b7f04993.js";import"./elevationInfoUtils.0270f3ac.js";import"./dragEventPipeline3D.92efcf93.js";import"./EditGeometryOperations.c1c61fdd.js";import"./QueryEngineResult.9885fa73.js";import"./WhereClause.c395dc79.js";import"./utils.5e3fd577.js";import"./ClassBreaksDefinition.c5cbbd6d.js";import"./json.8bd707cf.js";import"./dehydratedFeatureComparison.46ca5791.js";let e=class extends n{constructor(t){super(t)}get availability(){return 1}refresh(){}async fetchCandidates(t,p){const o=this.layerSource.layer.source;return o.querySnapping?(await o.querySnapping({distance:t.distance,point:t.coordinateHelper.vectorToPoint(t.point).toJSON(),types:t.types,query:c(t.filter)?t.filter.createQuery().toJSON():{where:"1=1"}},{signal:p})).candidates.map(a=>s(a,t.coordinateHelper,t.elevationInfo)):[]}};r([i({constructOnly:!0})],e.prototype,"layerSource",void 0),r([i({readOnly:!0})],e.prototype,"availability",null),e=r([l("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],e);export{e as FeatureCollectionSnappingSource};
