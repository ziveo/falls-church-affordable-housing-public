import{m4 as S,F as w,bH as T,bt as _,aH as m,e as i,d as o,n as u,r3 as O,mx as $,my as x,mz as L,q$ as b,mA as A,r4 as I,u as M,av as N,U as j,rL as U,bM as D,r as J,t as K,r6 as h,az as p,di as V,dj as P,dk as z,dl as E,fn as R,d8 as F,r9 as H,B as k}from"./index.a0c3159d.js";import{f as y}from"./SceneModification.cfa8b2b2.js";var a;let n=a=class extends S(w.ofType(y)){constructor(e){super(e),this.url=null}clone(){return new a({url:this.url,items:this.items.map(e=>e.clone())})}toJSON(e){return this.toArray().map(s=>s.toJSON(e)).filter(s=>!!s.geometry)}static fromJSON(e,s){const r=new a;for(const d of e)r.add(y.fromJSON(d,s));return r}static async fromUrl(e,s,r){const d={url:T(e),origin:"service"},v=await _(e,{responseType:"json",signal:m(r,"signal")}),g=s.toJSON(),l=[];for(const c of v.data)l.push(y.fromJSON({...c,geometry:{...c.geometry,spatialReference:g}},d));return new a({url:e,items:l})}};i([o({type:String})],n.prototype,"url",void 0),n=a=i([u("esri.layers.support.SceneModifications")],n);const f=n;let t=class extends O($(x(L(b(A(I(k))))))){constructor(...e){super(...e),this._handles=new M,this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.elevationInfo=null,this.path=null}destroy(){this._handles.destroy()}initialize(){this._handles.add(N(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,j))}normalizeCtorArgs(e,s){return typeof e=="string"?{url:e,...s}:e}readModifications(e,s,r){this._modificationsSource={url:U(e,r),context:r}}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const s=m(e,"signal");try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(r){D(r)}if(await this._fetchService(s),J(this._modificationsSource)){const r=await f.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",r,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,s)}beforeSave(){if(!K(this._modificationsSource))return this.load().then(()=>{},()=>{})}async saveAs(e,s){return this._debouncedSaveOperations(h.SAVE_AS,{...s,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(h.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new p("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new p("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new p("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}};i([o({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([o({type:["show","hide"]})],t.prototype,"listMode",void 0),i([o({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([o({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([o({type:V,readOnly:!0})],t.prototype,"nodePages",void 0),i([o({type:[P],readOnly:!0})],t.prototype,"materialDefinitions",void 0),i([o({type:[z],readOnly:!0})],t.prototype,"textureSetDefinitions",void 0),i([o({type:[E],readOnly:!0})],t.prototype,"geometryDefinitions",void 0),i([o({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([o({type:f}),R({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([F(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([o(H)],t.prototype,"elevationInfo",void 0),i([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),t=i([u("esri.layers.IntegratedMeshLayer")],t);const C=t;export{C as default};
